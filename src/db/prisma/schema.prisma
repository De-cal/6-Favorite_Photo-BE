generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  email          String           @unique
  password       String
  nickname       String
  pointAmount    Int
  createCount    Int              @default(0) //포토카드 생성횟수수
  createdAt      DateTime         @default(now())
  notification   Notification[]
  photoCards     PhotoCard[]
  order          Order[]
  OwnedPhotoCard OwnedPhotoCard[]
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  isRead    Boolean
  message   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model PhotoCard {
  id          String   @id @default(uuid())
  title       String
  description String
  rank        RankList
  genre       Genre
  price       Int
  imgUrl      String
  creatorId   String
  creator     User     @relation(fields: [creatorId], references: [id])
  createdAt   DateTime @default(now())

  ownedPhotoCard OwnedPhotoCard[]
  order          Order[]
  SellingCard    SellingCard[]
}

enum RankList {
  COMMON // 일반
  RARE // 레어
  SUPERRARE // 슈퍼레어
  LEGENDARY // 레전더리
}

enum Genre {
  LANDSCAPE // 풍경
  PORTRAIT // 인물
  ANIMAL // 동물
  OBJECT // 사물
  FOOD // 음식
  ETC // 기타
}

model OwnedPhotoCard {
  id          String    @id @default(uuid())
  userId      String
  photoCardId String
  quantity    Int
  price       Int //실제판매가격        
  user        User      @relation(fields: [userId], references: [id])
  photoCard   PhotoCard @relation(fields: [photoCardId], references: [id])
  order       Order[]
}

enum SellingPhotocardStatus {
  SELLING // 판매중   => 핀메중
  // EXCHANGE_REQUESTING // 교환 요청  ->교환제시 대기중 
  SOLDOUT // 품절
}

model SellingCard {
  id                String                 @id @default(uuid())
  price             Int
  totalQuantity     Int
  remainingQuantity Int
  exchangeText      String
  exchangeRank      RankList
  exchangeGenre     Genre
  PhotoCardId       String
  createdAt         DateTime               @default(now())
  status            SellingPhotocardStatus
  PhotoCard         PhotoCard              @relation(fields: [PhotoCardId], references: [id])
  requestedCard     Exchange[]             @relation("ExchangeGiver")
  Exchange          Exchange[]
}

model Order {
  id              String   @id @default(uuid())
  quantity        Int
  price           Int
  totalPrice      Int
  userPhotoCardId String
  buyerId         String
  photoCardId     String
  createdAt       DateTime @default(now())

  buyer            User            @relation(fields: [buyerId], references: [id])
  photocard        PhotoCard       @relation(fields: [photoCardId], references: [id])
  OwnedPhotoCard   OwnedPhotoCard? @relation(fields: [ownedPhotoCardId], references: [id])
  ownedPhotoCardId String?
}

model Exchange {
  id             String         @id @default(uuid())
  giverCardId    String
  takerCardId    String
  description    String
  status         ExchangeStatus
  createdAt      DateTime       @default(now())
  requestingCard SellingCard    @relation("ExchangeRequesting", fields: [sellingCardId], references: [id])
  SellingCard    SellingCard?   @relation(fields: [sellingCardId], references: [id])
  sellingCardId  String?
  sellingCardId  String
}

enum ExchangeStatus {
  PENDING // 교환 중
  ACCEPTED // 교환 확정
  REJECTED // 교환 거절  
  CANCELED // 교환 취소
}
