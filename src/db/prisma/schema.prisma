generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  nickname    String
  pointAmount Int
  createCount Int      @default(0)
  createdAt   DateTime @default(now())

  notifications UserNotification[]
  userPhotoCard UserPhotoCard[]
  order         Order[]
  photoCard     PhotoCard[]
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  createdAt DateTime @default(now())

  users UserNotification[]
}

model UserNotification {
  userId         String
  notificationId String
  isRead         Boolean @default(false)

  user         User         @relation(fields: [userId], references: [id])
  notification Notification @relation(fields: [notificationId], references: [id])

  @@id([userId, notificationId])
}

model PhotoCard {
  id          String   @id @default(uuid())
  title       String
  description String
  rank        RankList
  genre       Genre
  price       Int
  imgUrl      String
  creatorId   String
  creator     User     @relation(fields: [creatorId], references: [id])
  createdAt   DateTime @default(now())

  userPhotoCard UserPhotoCard[]
  order         Order[]
}

enum RankList {
  COMMON // 일반
  RARE // 레어
  SUPERRARE // 슈퍼레어
  LEGENDARY // 레전더리
}

enum Genre {
  LANDSCAPE // 풍경
  PORTRAIT // 인물
  ANIMAL // 동물
  OBJECT // 사물
  FOOD // 음식
  ETC // 기타
}

model UserPhotoCard {
  id          String              @id @default(uuid())
  userId      String
  photoCardId String
  quantity    Int
  price       Int //실제판매가격            
  status      UserPhotoCardStatus @default(OWNED)
  createdAt   DateTime            @default(now())

  user      User      @relation(fields: [userId], references: [id])
  photoCard PhotoCard @relation(fields: [photoCardId], references: [id])

  cardArticle CardArticle[]
  order       Order[]
  giver       Exchange[]    @relation("ExchangeGiver")
  taker       Exchange[]    @relation("ExchangeTaker")
}

enum UserPhotoCardStatus {
  OWNED // 보유중  => 마이갤러리
  SELLING // 판매중   => 판매중
  EXCHANGE_REQUESTED // 교환 요청  ->교환제시 대기중 
  SOLDOUT // 품절
}

model CardArticle {
  id                String   @id @default(uuid())
  price             Int
  totalQuantity     Int
  remainingQuantity Int
  exchangeText      String
  exchangeRank      RankList
  exchangeGenre     Genre
  userPhotoCardId   String
  createdAt         DateTime @default(now())

  userPhotoCard UserPhotoCard @relation(fields: [userPhotoCardId], references: [id])
}

model Order {
  id              String   @id @default(uuid())
  quantity        Int
  price           Int
  totalPrice      Int
  userPhotoCardId String
  userId          String
  photoCardId     String
  createdAt       DateTime @default(now())

  buyer     UserPhotoCard @relation(fields: [userPhotoCardId], references: [id])
  seller    User          @relation(fields: [userId], references: [id])
  photocard PhotoCard     @relation(fields: [photoCardId], references: [id])
}

model Exchange {
  id          String         @id @default(uuid())
  giverCardId String
  takerCardId String
  description String
  status      ExchangeStatus @default(PENDING)
  createdAt   DateTime       @default(now())

  giverCard UserPhotoCard @relation("ExchangeGiver", fields: [giverCardId], references: [id])
  takerCard UserPhotoCard @relation("ExchangeTaker", fields: [takerCardId], references: [id])
}

enum ExchangeStatus {
  PENDING // 교환 중
  ACCEPTED // 교환 확정
  REJECTED // 교환 거절  
  CANCELED // 교환 취소
}
