generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  nickname    String   @unique
  pointAmount Int
  createCount Int      @default(0)
  createdAt   DateTime @default(now())

  notifications UserNotification[]
  userPhotoCard UserPhotoCard[]
  photoCard     PhotoCard[]
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  createdAt DateTime @default(now())

  users UserNotification[]
}

model UserNotification {
  userId         String
  notificationId String
  isRead         Boolean @default(false)

  user         User         @relation(fields: [userId], references: [id])
  notification Notification @relation(fields: [notificationId], references: [id])

  @@id([userId, notificationId])
}

model PhotoCard {
  id          String   @id @default(uuid())
  title       String
  description String
  rank        RankList
  genre       Genre
  price       Int
  imgUrl      String
  creatorId   String
  creator     User     @relation(fields: [creatorId], references: [id])
  createdAt   DateTime @default(now())

  userPhotoCard UserPhotoCard[]
}

enum RankList {
  COMMON // 일반
  RARE // 레어
  SUPERRARE // 슈퍼레어
  LEGENDARY // 레전더리
}

enum Genre {
  LANDSCAPE // 풍경
  PORTRAIT // 인물
  ANIMAL // 동물
  OBJECT // 사물
  FOOD // 음식
  ETC // 기타
}

model UserPhotoCard {
  id          String              @id @default(uuid())
  userId      String
  photoCardId String
  quantity    Int
  price       Int //실제판매가격            
  status      UserPhotoCardStatus @default(OWNED)
  createdAt   DateTime            @default(now())

  user      User      @relation(fields: [userId], references: [id])
  photoCard PhotoCard @relation(fields: [photoCardId], references: [id])

  cardArticle CardArticle[]
  giver       Exchange[]    @relation("ExchangeGiver")
  taker       Exchange[]    @relation("ExchangeTaker")
}

enum UserPhotoCardStatus {
  OWNED // 보유중  => 마이갤러리 
  SELLING // 판매중   => 판매중
  EXCHANGE_REQUESTED // 교환 요청  ->교환제시 대기중 
  SOLDOUT // 품절 
}

// 유저 포토카드를 참조하는 다른 테이블 에서도 read 속도 올라감
// 
model CardArticle {
  id                String        @id @default(uuid())
  price             Int
  totalQuantity     Int
  remainingQuantity Int
  exchangeText      String
  exchangeRank      RankList
  exchangeGenre     Genre
  userPhotoCardId   String
  createdAt         DateTime      @default(now())
  userPhotoCard     UserPhotoCard @relation(fields: [userPhotoCardId], references: [id])
}

// 유저포토테이블  ->   
// 유저포토테이블  ->   기존 방식 /////  보유중일때 가격은 사온가격입니다.
// 유저포토테이블
// 유저아이디      포토카드아이디       개수        가격       상태
// 민경                 1번            5          3        보유중  
// 민경                 1번            5          2        보유중  

// 5개 판매 등록

// 유저포토테이블 
// 유저아이디      포토카드아이디       개수        가격       상태
// 민경                 1번             5          1        보유중
// 민경                 1번             5          4        판매중 

// 카드아티클테이블 
// 전체수량       남은수량
//    5              5       -> 유저포토카드에서 판매중인거

// 2장이 팔렷다 

//   -> 기존 방식
// 유저아이디      포토카드아이디       개수        가격       상태
// 민경                 1번             5          1        보유중
// 민경                 1번             3          4        판매중 

// 카드아티클테이블 
// 전체수량       남은수량
//    5             3  
//--------------------------------------------------------------------
//--------------------------------------------------------------------
//--------------------------------------------------------------------
// 유저포토테이블 -> 유저포토카드 테이블에서 스태이트를 없애는 방식
// 유저아이디      포토카드아이디       개수        (사온)가격       
// 민경                 1번            10          2        

// 5개 판매 등록

// 유저포토카드테이블 <- 보유중인것만 있는 테이블 = 상태 보유중을 대체
// 유저아이디      포토카드아이디       개수        (사온)가격      
// 민경                 1번             5          2       

// 카드아티클테이블  <- 판매중인것만 있는 테이블 = 상태 보유중을 대체
// 전체수량       남은수량
//    5              5       ->  유저포토카드에서 판매 등록 한만큼  

//Exchange 테이블  <- 교환에 관련된 테이블 = 상태 교환제시한 상태를 대체

// 2장이 팔렷다 

// 유저포토테이블 
// 유저아이디      포토카드아이디       개수        가격      
// 민경                 1번             5          2        

// 카드아티클테이블 
// 전체수량       남은수량
//    5             3  

// => 바꾸기 전 문제가 됐던 부분
// 판매 시  1원에 사온거 2원에 사온거 중에 어떤걸 팔건지 애매. 
// 
// 판매 시 
//
//
// => 바꿀 시 문제가 되는 부분 유저포토카드 나의 판매 목록 페이지에서
// 원래는 state = 판매중 + 교환대기중 인걸 가져 오면 됐는데 -> 유저포토카드테이블 1개에서 다 불러오기 가능
// 바꾸게 된다면 아티클테이블 ->userid + 익스체인지 테이블 -> userid  테이블 두개를 가져와야함
// 판매 수정 시 총 수량. 유저포토카드 - quantity + 카드아티클 remainqiantity 이것도 테이블2개에서 더한값으로 가져와야함
//
//  뮤테이션과      리드효율성
//  -----------------------------------------------------------------------
// 뮤테이션 관점에선 뒷방법(상태없애는 방법)이 좋고 테이블 리드 방식(상태있는방법)으론 앞방식이 좋다.
//
//
// 기존방식
// 유저포토테이블 
// 유저아이디      포토카드아이디       개수        가격       상태
// 민경                 1번             1          3        보유중  
// 민경                 1번             2          4        보유중 
// 민경                 1번             3          4        판매중
// 민경                 1번             1          4        교환제시중

// 바꾼방식
// 유저포토테이블 
// 유저아이디      포토카드아이디       개수        가격       
// 민경                 1번             1          3        

// 카드아티클 테이블 -> 테이블이 판매중 상태를 대체
// ...

// 익스체인지 테이블 -> 테이블이 교환제시중 상태를 대체
// ...   

// 
//          10장 등록
//

// 유저포토테이블 
// 유저아이디      포토카드아이디       개수        가격       상태
// 민경                 1번            10          5        판매중  
//
// 카드 아티클 테이블 
// 유저아이디      포토카드아이디       개수        가격       상태
// 민경                 1번             10          5        판매중  
// 
//
//          판매취소
//
//
// 유저포토테이블 
// 유저아이디      포토카드아이디       개수        가격       상태
// 민경                 1번            10          5        보유중
//
//----------------------------------------------
//
// 바뀐 방식
// 유저포토테이블 
// 유저아이디      포토카드아이디       개수        가격       상태
// 민경                 1번             5          3        보유중  
// 민경                 1번             5          4        보유중 
// 
//          10장 등록
//
// 유저 포토카드 테이블
// 유저아이디      포토카드아이디       개수        가격       상태
// 
// 카드 아티클 테이블 
// 유저아이디      포토카드아이디       개수        가격       상태
// 민경                 1번            10          5        판매중  
// 
//          판매취소
//
// 
// 유저포토테이블 
// 유저아이디      포토카드아이디       개수        가격       상태
// 민경                 1번            10          5        보유중
//
//
//
//

model Exchange {
  id              String   @id @default(uuid())
  requesterCardId String //카드 교환 신청 건 사람 카드 id
  recipientCardId String //카드 교환 신청 받은 사람 카드 id
  description     String
  createdAt       DateTime @default(now())

  requesterCard UserPhotoCard @relation("ExchangeGiver", fields: [requesterCardId], references: [id])
  recipientCard UserPhotoCard @relation("ExchangeTaker", fields: [recipientCardId], references: [id])
}
